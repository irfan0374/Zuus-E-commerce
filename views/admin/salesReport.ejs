<%- include('./layout/admin_header.ejs')%>
<section class="content-main">
    <div class="card mb-4">
      <div class="row ml-15">
        <div class="col-lg-6">
          <h1 class="mt-5">Sales Report</h1>
        </div>

        <div class="col-lg-6 text-lg-end">
          <button type="button" onclick="generateExcel()" class="btn btn-primary mt-4">
            Excel 
          </button>
          <button type="button" onclick="generatePDF()" class="btn btn-primary mt-4">
            PDF 
          </button>
        </div>

      </div>
      <div class="row mt-4 ml-15 mb-3">
        <div class="col-lg-4">
          <div class="form-group">
            <label for="startDatePicker">Select start date:</label>
            <input type="date" id="startDatePicker" class="form-control" onchange="selectedDate()" />
          </div>
        </div>
        <div class="col-lg-4">
          <div class="form-group">
            <label for="endDatePicker">Select end date:</label>
            <input type="date" id="endDatePicker" class="form-control" onchange="selectedDate()" />
          </div>
        </div>
      </div>
      <div id="dateError" class="text-danger ml-15 mb-3" style="display: none;">End date should be after start date.</div>
      <!-- card-header end// -->
      <div class="card-body">
        <div class="table-responsive">
          <div id="printThisDiv">

            <table class="table table-hover table-bordered" id="tableReport">
              <thead id="tablehead">
                <tr>
                  <th>No</th>
                  <th scope="col">Id</th>
                  <th scope="col">Product</th>
                  <th scope="col">Price</th>
                  <th scope="col">Quantity</th>
                  <th scope="col">Payment Method</th>
                  <th scope="col">Total</th>
                  <th scope="col">Date</th>
                </tr>
              </thead>
              <tbody>
                <%let count=1%>
                <% order.forEach(order=>{
                    order.products.forEach(product=>{%>
                    <tr>
                        <td>
                            <%=count %>
                        </td>
                        <td><b>
                            <%=order._id%>
                        </b>

                        </td>
                        <td>
                            <%=product.productId.name%>
                        </td>
                        <td>
                            <%=product.productId.price%>

                        </td>
                        <td>
                            <%=product.quantity%>

                        </td>
                        <td>
                            <%=order.payment%>
                        </td>
                        <td>
                            <%=product.productId.price*product.quantity%>
                        </td>
                        <td>
                            <%= moment(order.date).format('MM/DD/YYYY') %>
                          </td>
                      
                    </tr>
                    <%count++%>
                    <%})%>
                    <%})%>
              </tbody>
            </table>

          </div>
        </div>
        <!-- table-responsive //end -->
      </div>
      <!-- card-body end// -->
    </div>
    <!-- card end// --> 
    <!-- Pagination section goes here -->
  </section>
  <%- include('./layout/admin_footer.ejs')%>

<!-- sales report download -->
  <script>

    // PDF Download
    function generatePDF() {

      const orders = document.querySelectorAll('.table tbody tr');

      const orderRows = [];
      orders.forEach(order => {
          const No = order.cells[0].innerText;
          const Id = order.cells[1].innerText;
          const Product = order.cells[2].innerText;
          const Price = order.cells[3].innerText;
          const Quantity = order.cells[4].innerText;
          const Payment_Method = order.cells[5].innerText;
          const Total = order.cells[6].innerText;
          const Date = order.cells[7].innerText;

          orderRows.push([No, Id, Product, Price, Quantity, Payment_Method, Total, Date]);
      });

        const pdfFormat = {
            content: [
                { text: 'ZUUS Sales Report', style: 'header' },
                {
                    table: {
                        headerRows: 1,
                        widths: [20,70,70,50,45,30,50,80],
                        body: [['No','Id', 'Product', 'Price', 'Quantity', 'Payment_Method', 'Total', 'Date'], ...orderRows] }
                }
            ],
            styles: {
                header: {
                    fontSize: 20,
                    bold: true,
                    alignment: 'center',
                    margin: [0, 0, 0, 10]
                }
            }
        };

        pdfMake.createPdf(pdfFormat).print();
    }

    // Excel Download
    function generateExcel() {
        const orders = document.querySelectorAll('.table tbody tr');

        const orderData = [];
      orders.forEach(order => {
          const No = order.cells[0].innerText;
          const Id = order.cells[1].innerText;
          const Product = order.cells[2].innerText;
          const Price = order.cells[3].innerText;
          const Quantity = order.cells[4].innerText;
          const Payment_Method = order.cells[5].innerText;
          const Total = order.cells[6].innerText;
          const Date = order.cells[7].innerText;

          orderData.push([No, Id, Product, Price, Quantity, Payment_Method, Total, Date]);
      });

        const header = ['No','Id', 'Product', 'Price', 'Quantity', 'Payment_Method', 'Total', 'Date'];
        const data = [header, ...orderData];

        const ws = XLSX.utils.aoa_to_sheet(data);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'Sales Report');

        // Generating filename based on the current date and time
        const filename = 'Sales_Report_' + new Date().toISOString().slice(0, 19).replace(/:/g, '-') + '.xlsx';

        // Convert the workbook to a binary Excel file and trigger the download
        XLSX.writeFile(wb, filename);
    }
</script>